{
  "name": "winston-syslog",
  "description": "A syslog transport for winston",
  "version": "0.2.5",
  "author": {
    "name": "Charlie Robbins",
    "email": "charlie.robbins@gmail.com"
  },
  "contributors": [
    {
      "name": "Squeeks",
      "email": "privacymyass@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "http://github.com/indexzero/winston-syslog.git"
  },
  "keywords": [
    "logging",
    "sysadmin",
    "tools",
    "winston",
    "syslog"
  ],
  "dependencies": {
    "glossy": "0.x.x",
    "unix-dgram": ">= 0.0.1"
  },
  "devDependencies": {
    "winston": "0.5.x",
    "vows": "0.6.x"
  },
  "main": "./lib/winston-syslog",
  "scripts": {
    "test": "sudo vows test/*-test.js --spec"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "readme": "# winston-syslog\n\nA Syslog transport for [winston][0].\n\n## Installation\n\n### Installing npm (node package manager)\n\n``` bash\n  $ curl http://npmjs.org/install.sh | sh\n```\n\n### Installing winston-syslog\n\n``` bash\n  $ npm install winston \n  $ npm install winston-syslog\n```\n\n## Motivation\n`tldr;?`: To break the [winston][0] codebase into small modules that work together.\n\nThe [winston][0] codebase has been growing significantly with contributions and other logging transports. This is **awesome**. However, taking a ton of additional dependencies just to do something simple like logging to the Console and a File is overkill.  \n\n## Usage\nTo use the Syslog transport in [winston][0], you simply need to require it and then either add it to an existing [winston][0] logger or pass an instance to a new [winston][0] logger:\n\n``` js\n  var winston = require('winston');\n  \n  //\n  // Requiring `winston-syslog` will expose \n  // `winston.transports.Syslog`\n  //\n  require('winston-syslog').Syslog;\n  \n  winston.add(winston.transports.Syslog, options);\n```\n\nIn addition to the options accepted by the syslog (compliant with [RFC 3164][1] and [RFC 5424][2]), the Riak transport also accepts the following options. It is worth noting that the riak-js debug option is set to *false* by default:\n\n* __host:__ The host running syslogd, defaults to localhost.\n* __port:__ The port on the host that syslog is running on, defaults to syslogd's default port.\n* __protocol:__ The network protocol to log over (e.g. `tcp4`, `udp4`, etc).\n* __pid:__ PID of the process that log messages are coming from (Default `process.pid`).\n* __facility:__ Syslog facility to use (Default: `local0`).\n* __localhost:__ Host to indicate that log messages are coming from (Default: `localhost`).\n* __type:__ The type of the syslog protocol to use (Default: `BSD`).\n* __app_name:__ The name of the application (Default: `process.title`).\n\n*Metadata:* Logged as string compiled by [glossy][3].\n\n## Log Levels\nBecause syslog only allows a subset of the levels available in [winston][0], levels that do not match will be ignored. Therefore, in order to use `winston-syslog` effectively, you should indicate to [winston][0] that you want to use the syslog levels:\n\n``` js\n  var winston = require('winston');\n  winston.setLevels(winston.config.syslog.levels);\n```\n\nThe `Syslog` transport will only log to the level that are available in the syslog protocol. These are (in increasing order of severity):\n\n* debug\n* info\n* notice\n* warning\n* error\n* crit\n* alert\n* emerg\n\n## Syslog Configuration\n\nYou will have to configure your syslog server to accept TCP connections.\nThis is usually done in `/etc/syslog-ng.conf`. Let's say you have an app called `fnord`,\nthe configuration would look something like this:\n\n```\n  source tcp_s {\n    tcp(ip(0.0.0.0) port(514) max-connections(256));\n  };\n  destination fnord_d {\n    file(\"/var/log/fnord.log\");\n  };\n  log { source(tcp_s); destination(fnord_d); };\n```\n\nIf you have multiple apps which need to log via TCP, you can specify filters, as such:\n\n```\n  filter fnord_f { program(\"fnord\"); };\n```\n\nThen modify the log statement to read:\n\n```\n  log { source(tcp_s); filter(fnord_f); destination(fnord_d); };\n```\n\nNow if you have another app, called `bnord`, create similar `destination` and `filter` configurations for it, and specify a new log statement, with the same `source`:\n\n```\n  log { source(tcp_s); filter(bnord_f); destination(bnord_d); };\n```\n\nFor this to work, you have to make sure you set the `process.title` variable in your node app.\n\n``` js\n  process.title = 'fnord';\n```\n\n#### Author: [Charlie Robbins](http://blog.nodejitsu.com)\n#### Contributors: [Squeeks](https://github.com/squeeks)\n\n[0]: https://github.com/indexzero/winston\n[1]: http://www.ietf.org/rfc/rfc3164.txt\n[2]: http://tools.ietf.org/html/rfc5424\n[3]: https://github.com/squeeks/glossy",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/indexzero/winston-syslog/issues"
  },
  "homepage": "https://github.com/indexzero/winston-syslog",
  "_id": "winston-syslog@0.2.5",
  "dist": {
    "shasum": "9eff1a0196ae6ec9b570a35581a8654566261c10"
  },
  "_from": "winston-syslog@",
  "_resolved": "https://registry.npmjs.org/winston-syslog/-/winston-syslog-0.2.5.tgz"
}
